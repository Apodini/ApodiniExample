name: Build and Test

on:
  push:
    branches:
      - develop
      - release
  pull_request:
    branches:
      - develop
      - release

jobs:
  # linux:
  #   name: Linux ${{ matrix.linux }} ${{ matrix.configuration }}
  #   container:
  #     image: swift:5.3-${{ matrix.linux }}
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       linux: [bionic, xenial, focal, amazonlinux2, centos8]
  #       configuration: [debug, release, release_testing]
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Install libsqlite3, lsof and zsh
  #     if: ${{ !(startsWith( matrix.linux, 'centos' ) || startsWith( matrix.linux, 'amazonlinux' )) }}
  #     run: apt-get update && apt-get install -y --no-install-recommends libsqlite3-dev lsof zsh
  #   - name: Install libsqlite3
  #     if: startsWith( matrix.linux, 'amazonlinux' )
  #     run: yum update -y && yum install -y sqlite-devel lsof zsh
  #   - name: Install libsqlite3
  #     if: startsWith( matrix.linux, 'centos' )
  #     run: yum update -y --nobest && yum install -y sqlite-devel lsof zsh
  #   - uses: actions/cache@v2
  #     with:
  #       path: .build
  #       key: ${{ runner.os }}-${{matrix.linux}}-spm-${{ hashFiles('Package.resolved') }}
  #   - name: Check Swift version
  #     run: swift --version

  #   - name: Release Build # Ensuring release build runs successfully without -enable-testing flag
  #     if: matrix.configuration == 'release'
  #     run: cd WebService && swift build -c release
  #   - name: Release Build & Test
  #     if: matrix.configuration == 'release_testing'
  #     run: cd WebService && swift test -c release --enable-test-discovery -Xswiftc -enable-testing -Xswiftc -DRELEASE_TESTING
  #   - name: Debug Build & Test
  #     if: matrix.configuration == 'debug'
  #     run: cd WebService && swift test -c debug --enable-test-discovery

  docker:
    name: Docker compose build and test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Start containers
        run: docker-compose up -d --build

      - name: Test if WebService is alive
        run: sleep 10 && curl http://127.0.0.1:80 -sf && curl http://127.0.0.1:8080 -sf

      - name: Stop containers
        if: always()
        run: docker-compose down